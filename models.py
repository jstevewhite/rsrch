"""Data models for the research pipeline."""

from dataclasses import dataclass, field
from typing import List, Dict, Optional
from datetime import datetime
from enum import Enum


class Intent(Enum):
    """Intent categories for user queries."""
    INFORMATIONAL = "informational"
    COMPARATIVE = "comparative"
    NEWS = "news"
    CODE = "code"
    TUTORIAL = "tutorial"
    RESEARCH = "research"
    GENERAL = "general"


@dataclass
class Query:
    """User query with metadata."""
    text: str
    intent: Optional[Intent] = None
    timestamp: datetime = field(default_factory=datetime.now)


@dataclass
class SearchQuery:
    """Individual search query generated by planner."""
    query: str
    purpose: str
    priority: int = 1


@dataclass
class ResearchPlan:
    """Research plan generated by the planner."""
    query: Query
    sections: List[str]
    search_queries: List[SearchQuery]
    rationale: str


@dataclass
class SearchResult:
    """Individual search result."""
    url: str
    title: str
    snippet: str
    rank: int
    relevance_score: Optional[float] = None


@dataclass
class ScrapedContent:
    """Scraped and processed content from a URL."""
    url: str
    title: str
    content: str
    chunks: List[str]
    metadata: Dict[str, str]
    retrieved_at: datetime = field(default_factory=datetime.now)


@dataclass
class Citation:
    """Citation with source information."""
    text: str
    url: str
    title: str
    chunk_id: Optional[int] = None


@dataclass
class Summary:
    """Content summary with citations."""
    text: str
    citations: List[Citation]
    url: str
    relevance_score: float


@dataclass
class ContextPackage:
    """Assembled context for report generation."""
    query: Query
    plan: ResearchPlan
    summaries: List[Summary]
    additional_context: Dict[str, str] = field(default_factory=dict)


@dataclass
class ReflectionResult:
    """Result of reflection stage."""
    is_complete: bool
    missing_information: List[str]
    additional_queries: List[SearchQuery]
    rationale: str


@dataclass
class Report:
    """Final generated report."""
    query: Query
    content: str
    citations: List[Citation]
    metadata: Dict[str, str]
    generated_at: datetime = field(default_factory=datetime.now)
